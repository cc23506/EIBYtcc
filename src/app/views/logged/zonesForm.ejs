<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/zonesForm.css">
    <title><%= zone ? 'Editar zona' : 'Adicionar nova zona' %></title>
</head>
<body>
    <h1><%= zone ? 'Editar zona' : 'Adicionar nova zona' %></h1>

    <div class="container">
        <form id="zone-form" action="<%= zone ? '/save-zone/' + zone.id : '/save-zone' %>" method="POST" enctype="multipart/form-data">
            <% if (zone) { %>
                <input type="hidden" name="zoneId" value="<%= zone.id %>">
            <% } %>

            <label for="name">Nome:</label>
            <input type="text" id="name" name="name" value="<%= zone ? zone.name : '' %>" required>

            <label for="x1">X1:</label>
            <input type="number" id="x1" name="x1" min="1" value="<%= zone ? zone.x1 : '1' %>" required>

            <label for="x2">X2:</label>
            <input type="number" id="x2" name="x2" min="1" value="<%= zone ? zone.x2 : '50' %>" required>

            <label for="y1">Y1:</label>
            <input type="number" id="y1" name="y1" min="1" value="<%= zone ? zone.y1 : '1' %>" required>

            <label for="y2">Y2:</label>
            <input type="number" id="y2" name="y2" min="1" value="<%= zone ? zone.y2 : '50' %>" required>

            <button type="submit"><%= zone ? 'Salvar Alterações' : 'Adicionar' %></button>
            <button type="button" onclick="javascript:history.back()">Cancelar</button>
        </form>

        <div id="image-container">
            <h3>Pré-visualização da imagem carregada:</h3>
            <div class="image-overlay-wrapper">
                <img id="uploaded-image" src="<%= imagePath %>" alt="Imagem carregada">
                <canvas id="image-canvas"></canvas>

                <% zones.forEach(zone => { %>
                    <div class="zone <%= zone.id == editingZoneId ? 'editing-zone' : '' %>"
                         data-id="<%= zone.id %>"
                         data-x1="<%= zone.x1 %>"
                         data-x2="<%= zone.x2 %>"
                         data-y1="<%= zone.y1 %>"
                         data-y2="<%= zone.y2 %>"
                         style="left: <%= zone.x1 %>px; top: <%= zone.y1 %>px; width: <%= zone.x2 - zone.x1 %>px; height: <%= zone.y2 - zone.y1 %>px; pointer-events: <%= zone.id == editingZoneId ? 'auto' : 'none' %>;">
                      <%= zone.name %>
                      <div class="resize-handle top-left"></div>
                      <div class="resize-handle top-right"></div>
                      <div class="resize-handle bottom-left"></div>
                      <div class="resize-handle bottom-right"></div>
                    </div>
                  <% }) %>
            </div>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
    const canvas = document.getElementById('image-canvas');
    const ctx = canvas.getContext('2d');
    const uploadedImage = document.getElementById('uploaded-image');
    const x1Input = document.getElementById('x1');
    const x2Input = document.getElementById('x2');
    const y1Input = document.getElementById('y1');
    const y2Input = document.getElementById('y2');
    let selectedZone = null;
    let offsetX, offsetY;
    let resizing = false;
    let resizeHandle = null;
    let isMouseDown = false;

    const editingZoneId = <%= zone ? zone.id : 'null' %>;

    function resizeCanvas() {
        const imageRect = uploadedImage.getBoundingClientRect();
        canvas.width = imageRect.width;
        canvas.height = imageRect.height;
        canvas.style.top = `${uploadedImage.offsetTop}px`;
        drawGrid();
    }
    
    function drawGrid() {
        const step = 50;  
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    
        ctx.strokeStyle = '#fff';
    
        for (let x = 0; x <= canvas.width; x += step) {
            ctx.beginPath();
            ctx.moveTo(x, 0);
            ctx.lineTo(x, canvas.height);
            ctx.stroke();
        }
    
        for (let y = 0; y <= canvas.height; y += step) {
            ctx.beginPath();
            ctx.moveTo(0, y);
            ctx.lineTo(canvas.width, y);
            ctx.stroke();
        }
    }

    function updateFormFields() {
        if (selectedZone) {
            const rect = selectedZone.getBoundingClientRect();
            const imageRect = uploadedImage.getBoundingClientRect();
            const scaleX = uploadedImage.naturalWidth / imageRect.width;
            const scaleY = uploadedImage.naturalHeight / imageRect.height;

            x1Input.value = Math.round((rect.left - imageRect.left) * scaleX);
            y1Input.value = Math.round((rect.top - imageRect.top) * scaleY);
            x2Input.value = Math.round((rect.right - imageRect.left) * scaleX);
            y2Input.value = Math.round((rect.bottom - imageRect.top) * scaleY);
        }
    }

    document.querySelectorAll('.zone').forEach(zone => {
        zone.addEventListener('mousedown', function (e) {
            const zoneId = parseInt(zone.getAttribute('data-id'));

            if (editingZoneId && zoneId !== editingZoneId) {
                return;
            }

            if (e.target.classList.contains('resize-handle')) {
                resizing = true;
                resizeHandle = e.target;
            } else {
                resizing = false;
                resizeHandle = null;
                selectedZone = zone;
            }

            isMouseDown = true;
            const zoneRect = zone.getBoundingClientRect();
            const imageRect = uploadedImage.getBoundingClientRect();
            offsetX = e.clientX - zoneRect.left;
            offsetY = e.clientY - zoneRect.top;
        });

        zone.addEventListener('click', function (e) {
            const zoneId = parseInt(zone.getAttribute('data-id'));

            if (editingZoneId && zoneId !== editingZoneId) {
                return;
            }

            document.querySelectorAll('.zone').forEach(zone => zone.classList.remove('editing-zone'));
            zone.classList.add('editing-zone');
            selectedZone = zone;
            updateFormFields();
        });
    });

    document.addEventListener('click', function (e) {
        if (!selectedZone && e.target !== uploadedImage) {
            document.querySelectorAll('.zone').forEach(zone => zone.classList.remove('editing-zone'));
            selectedZone = null;
        }
    });

    document.addEventListener('mousemove', function (e) {
        if (!selectedZone) return;
    
        const imageRect = uploadedImage.getBoundingClientRect();
    
        if (resizing && isMouseDown) {
            const zoneRect = selectedZone.getBoundingClientRect();
            const mouseX = e.clientX;
            const mouseY = e.clientY;
    
            if (resizeHandle.classList.contains('top-left')) {
                const newWidth = zoneRect.right - mouseX;
                const newHeight = zoneRect.bottom - mouseY;

                if (newWidth > 0 && newHeight > 0 && mouseX < zoneRect.right) {
                    selectedZone.style.left = `${mouseX - imageRect.left}px`;
                    selectedZone.style.top = `${mouseY - imageRect.top}px`;
                    selectedZone.style.width = `${newWidth}px`;
                    selectedZone.style.height = `${newHeight}px`;
                }
            }
            // Similar logic for other resize handles (top-right, bottom-left, bottom-right)
        }
    });

    window.addEventListener('resize', resizeCanvas);

    resizeCanvas();
});

            });
        </script>
    </div>
</body>
</html>